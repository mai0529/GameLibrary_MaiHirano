//-----------------------------------------------------------------------------------------------
//
// 敵の処理[enemy.cpp]
// Author : 平野舞
//s
//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------------------------
#include "enemy.h"			// 敵
#include "enemyManager.h"	// 敵マネージャー
#include "application.h"	// アプリケーション
#include "renderer.h"		// レンダリング
#include "time.h"			// タイム
#include "particle.h"		// パーティクル
#include "wall.h"			// 壁

//-----------------------------------------------------------------------------------------------
// 定数宣言
//-----------------------------------------------------------------------------------------------
// フレームカウントの最大数
static const int MAX_FREAM_COUNT = 60;
// 点滅カウンター
static const int ENEMY_BLINK = 60;
// 寿命
static const int ENEMY_LIFE = 1;

//-----------------------------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------------------------
CEnemy::CEnemy()
	: m_nID(0),m_posOld(0.0f,0.0f,0.0f),m_size(0.0f,0.0f,0.0f),m_move(0.0f, 0.0f, 0.0f), m_col(0.0f,0.0f,0.0f,0.0f), m_fSpeed(0.0f),m_nLife(0),
	m_type(ENEMY_TYPE_RABBIT), m_state(ENEMY_STATE_NORMAL),m_nAppeaTime(0), m_nCntBlink(0)
{
	
}

//-----------------------------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------------------------
CEnemy::~CEnemy()
{

}

//-----------------------------------------------------------------------------------------------
// 生成
//
//const D3DXVECTOR3& pos → 生成する座標位置
//-----------------------------------------------------------------------------------------------
CEnemy* CEnemy::Create(const D3DXVECTOR3& pos)
{
	// ポインタクラスを宣言
	CEnemy* pEnemy = new CEnemy;

	if (pEnemy != nullptr)
	{// もしnullptrではなかったら
		// 初期化
		pEnemy->Init(pos);
	}

	return pEnemy;
}

//-----------------------------------------------------------------------------------------------
// 初期化
//
// const D3DXVECTOR3& pos → 最初に表示する座標位置
//-----------------------------------------------------------------------------------------------
HRESULT CEnemy::Init(const D3DXVECTOR3& pos)
{
	// 寿命
	m_nLife = ENEMY_LIFE;

	// 点滅カウント
	m_nCntBlink = ENEMY_BLINK;

	// 出現時間を設定
	m_nAppeaTime = CTime::GetInstance()->GetTime();

	//オブジェクトタイプを設定
	SetObjectType(OBJECT_TYPE::OBJECT_TYPE_ENEMY);
	// オブジェクトの親を設定
	SetObjectParent(OBJECT_PARENT::OBJECT_PARENT_GAME);

	//サイズ
	CObject2D::SetSize(D3DXVECTOR3(m_size.x, m_size.y, 0.0f));

	CObject2D::Init(pos);

	return S_OK;
}

//-----------------------------------------------------------------------------------------------
// 終了
//-----------------------------------------------------------------------------------------------s
void CEnemy::Uninit()
{
	CObject2D::Uninit();
}

//-----------------------------------------------------------------------------------------------
// 更新
//-----------------------------------------------------------------------------------------------
void CEnemy::Update()
{
	//状態
	State();

	// 位置の取得
	D3DXVECTOR3 pos = CObject2D::GetPosition();

	// 前の位置を更新
	m_posOld = pos;

	// 移動量の更新
	pos += m_move;

	if (CollisionWall(pos))
	{// 壁に当たっていたら
		return;
	}

	if (m_nLife > 0)
	{
		if (OffScreen(pos))
		{// 画面外当たり判定
			return;
		}

		// 位置の更新
		CObject2D::SetPosition(pos);
		CObject2D::UpdatePos();
	}
}

//-----------------------------------------------------------------------------------------------
// 描画
//-----------------------------------------------------------------------------------------------
void CEnemy::Draw()
{
	CObject2D::Draw();
}

//-----------------------------------------------------------------------------------------------
// ヒット
//-----------------------------------------------------------------------------------------------
void CEnemy::Hit(int nDamage)
{
	m_nLife -= nDamage;

	if (m_nLife > 0)
	{// ライフが0以上だったら
		// 色の取得
		m_col = CObject2D::GetColor();
		// ダメージ状態にする
		m_state = ENEMY_STATE_DAMAGE;
	}
	else if (m_nLife <= 0)
	{// 寿命が0以下になったら
		m_state = ENEMY_STATE_DEATH;
	}
}

//-----------------------------------------------------------------------------------------------
// 格納先の番号を設定
//-----------------------------------------------------------------------------------------------
void CEnemy::SetID(int nID)
{
	m_nID = nID;
}

//-----------------------------------------------------------------------------------------------
// 格納先番号の取得
//-----------------------------------------------------------------------------------------------
int CEnemy::GetID()
{
	return m_nID;
}

//-----------------------------------------------------------------------------------------------
//	サイズを設定
//
// D3DXVECTOR3 size → ポリゴンの大きさ
//-----------------------------------------------------------------------------------------------
void CEnemy::SetSize(const D3DXVECTOR3& size)
{
	m_size = size;
}

//-----------------------------------------------------------------------------------------------
// 移動量を設定
//
// D3DXVECTOR3 move → 移動したい量
//-----------------------------------------------------------------------------------------------
void CEnemy::SetMove(const D3DXVECTOR3& move)
{
	m_move = move;
}

//-----------------------------------------------------------------------------------------------
// 速度を設定
//
// flaot fSpeed → 移動速度
//-----------------------------------------------------------------------------------------------
void CEnemy::SetSpeed(float fSpeed)
{
	m_fSpeed = fSpeed;
}

//-----------------------------------------------------------------------------------------------
// 速度を取得
//-----------------------------------------------------------------------------------------------
float CEnemy::GetSpeed()
{
	return m_fSpeed;
}

//-----------------------------------------------------------------------------------------------
// 寿命の設定
//
// int nLife → 寿命の長さ
//-----------------------------------------------------------------------------------------------
void CEnemy::SetLife(int nLife)
{
	m_nLife = nLife;
}

//-----------------------------------------------------------------------------------------------
// 寿命の取得
//-----------------------------------------------------------------------------------------------
int CEnemy::GetLife()
{
	return m_nLife;
}

//-----------------------------------------------------------------------------------------------
// 種類の設定
//
// ENEMY_TYPE type → 敵の種類
//-----------------------------------------------------------------------------------------------
void CEnemy::SetEnemyType(ENEMY_TYPE type)
{
	m_type = type;
}

//-----------------------------------------------------------------------------------------------
// 種類の取得
//-----------------------------------------------------------------------------------------------
CEnemy::ENEMY_TYPE CEnemy::GetEnemyType()
{
	return m_type;
}

//-----------------------------------------------------------------------------------------------
// 状態の取得
//-----------------------------------------------------------------------------------------------
CEnemy::ENEMY_STATE CEnemy::GetState()
{
	return m_state;
}

//-----------------------------------------------------------------------------------------------
// 出現経過時間を取得
//-----------------------------------------------------------------------------------------------
int CEnemy::GetAppeaTime()
{
	return m_nAppeaTime;
}

//-----------------------------------------------------------------------------------------------
// 状態
//-----------------------------------------------------------------------------------------------
void CEnemy::State()
{
	// 位置の取得
	D3DXVECTOR3 pos = CObject2D::GetPosition();

	switch (m_state)
	{
		// 通常
	case ENEMY_STATE_NORMAL:
		break;
		// ダメージ状態
	case ENEMY_STATE_DAMAGE:
		// 点滅する
		Blink();
		// カウントを減らす
		m_nCntBlink--;
		break;
		// 死亡状態
	case ENEMY_STATE_DEATH:
		// 終了する
		CEnemyManager::GetInstance()->DeleteEnemy(m_nID);
		// 爆発( パーティクル )する
		CParticle::Create(D3DXVECTOR3(pos));
		break;
		// その他
	default:
		break;
	}
}

//-----------------------------------------------------------------------------------------------
// 点滅
//-----------------------------------------------------------------------------------------------
void CEnemy::Blink()
{
	if (m_nCntBlink == 0)
	{// カウントが0になったら
		// 色を元に戻す
		CObject2D::SetColor(m_col);

		// 通常状態にする
		m_state = ENEMY_STATE_NORMAL;

		// カウントを戻す
		m_nCntBlink = ENEMY_BLINK;
	}
	else
	{
		// 色変更
		CObject2D::SetColor(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f));
	}
}

//-----------------------------------------------------------------------------------------------
// 壁の当たり判定
//-----------------------------------------------------------------------------------------------
bool CEnemy::CollisionWall(D3DXVECTOR3 pos)
{
	if (m_type != ENEMY_TYPE_CIRCLE && m_type != ENEMY_TYPE_STAR && m_type != ENEMY_TYPE_DEATH)
	{
		// 位置
		D3DXVECTOR3 posEnemy = pos;

		// 壁の位置の取得
		D3DXVECTOR3 posWall = CWall::GetInstance()->GetPosition();

		// 壁のサイズの取得
		D3DXVECTOR3 sizeWall = CWall::GetInstance()->GetSize();

		if (m_posOld.x - (m_size.x / 2.0f) > posWall.x + (sizeWall.x / 2.0f)
			&& pos.x - (m_size.x / 2.0f) < posWall.x + (sizeWall.x / 2.0f)
			|| m_posOld.x + (m_size.x / 2.0f) < posWall.x - (sizeWall.x / 2.0f)
			&& pos.x + (m_size.x / 2.0f) > posWall.x - (sizeWall.x / 2.0f))
		{
			CEnemyManager::GetInstance()->DeleteEnemy(m_nID);
			return true;
		}
	}

	return false;
}

//-----------------------------------------------------------------------------------------------
// 画面外判定
//-----------------------------------------------------------------------------------------------
bool CEnemy::OffScreen(D3DXVECTOR3 pos)
{
	if (pos.x - (m_size.x / 2.0f) >= CRenderer::SCREEN_WIDTH
		|| pos.x + (m_size.x / 2.0f) <= 0
		|| pos.y - (m_size.y / 2.0f) >= CRenderer::SCREEN_HEIGHT
		|| pos.y + (m_size.y / 2.0f) <= 0)
	{// 画面外にでたら
		if (m_type != ENEMY_TYPE_CIRCLE && m_type != ENEMY_TYPE_STAR && m_type != ENEMY_TYPE_RABBIT)
		{
			CEnemyManager::GetInstance()->DeleteEnemy(m_nID);

			return true;
		}
	}

	if (pos.y - (m_size.y / 2.0f) >= CRenderer::SCREEN_HEIGHT)
	{// 画面下だったら
		if (m_type == ENEMY_TYPE_RABBIT)
		{
			CEnemyManager::GetInstance()->DeleteEnemy(m_nID);

			return true;
		}
	}

	if (pos.x - (m_size.x / 2.0f) >= CRenderer::SCREEN_WIDTH
		|| pos.x + (m_size.x / 2.0f) <= 0
		|| pos.y - (m_size.y / 2.0f) >= CRenderer::SCREEN_HEIGHT)
	{// 画面外にでたら
		if (m_type == ENEMY_TYPE_CIRCLE || m_type == ENEMY_TYPE_STAR)
		{
			CEnemyManager::GetInstance()->DeleteEnemy(m_nID);

			return true;
		}
	}

	return false;
}