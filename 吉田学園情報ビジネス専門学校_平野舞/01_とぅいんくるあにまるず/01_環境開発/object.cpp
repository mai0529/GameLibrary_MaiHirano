//-----------------------------------------------------------------------------------------------
//
// オブジェクト処理[object.cpp]
// Author : 平野舞
//
//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------------------------
#include "object.h"		// オブジェクト

//-----------------------------------------------------------------------------------------------
// 定数宣言
//-----------------------------------------------------------------------------------------------
// オブジェクトの最大数
const int CObject::MAX_OBJECT;

//-----------------------------------------------------------------------------------------------
// 静的メンバ変数宣言
//-----------------------------------------------------------------------------------------------
CObject* CObject::m_apObject[MAX_OBJECT] = { nullptr };
int CObject::m_nNumAll = 0;

//-----------------------------------------------------------------------------------------------
//　コンストラクタ
//-----------------------------------------------------------------------------------------------
CObject::CObject()
	:m_ObjectType(OBJECT_TYPE_NONE), m_parent(OBJECT_PARENT_NONE)
{
	for (int nCntObject = 0; nCntObject < MAX_OBJECT; nCntObject++)
	{
		if (m_apObject[nCntObject] == nullptr)
		{// nullptrだったら
			// ポインタを格納
			m_apObject[nCntObject] = this;

			// 格納先の番号
			m_nID = nCntObject;

			// 個数を増やす
			m_nNumAll++;

			break;
		}
	}
}

//-----------------------------------------------------------------------------------------------
//　デストラクタ
//-----------------------------------------------------------------------------------------------
CObject::~CObject()
{

}

//-----------------------------------------------------------------------------------------------
//　すべてのメモリを解放
//-----------------------------------------------------------------------------------------------
void CObject::ReleseAll()
{
	for (int nCntObject = 0; nCntObject < MAX_OBJECT; nCntObject++)
	{
		if (m_apObject[nCntObject] != nullptr)
		{// nullptrではなかったら
			// 終了
			m_apObject[nCntObject]->Uninit();

			// メモリの開放
			delete m_apObject[nCntObject];

			// nullptrにする
			m_apObject[nCntObject] = nullptr;
		}
	}
}

//-----------------------------------------------------------------------------------------------
//　すべてを更新
//-----------------------------------------------------------------------------------------------
void CObject::UpdateAll()
{
	for (int nCntObject = 0; nCntObject < MAX_OBJECT; nCntObject++)
	{
		if (m_apObject[nCntObject] != nullptr)
		{// nullptrではなかったら
			// 更新
			m_apObject[nCntObject]->Update();
		}
	}
}

//-----------------------------------------------------------------------------------------------
//　すべてを描画
//-----------------------------------------------------------------------------------------------
void CObject::DrawAll()
{
	for (int nCntObject = 0; nCntObject < MAX_OBJECT; nCntObject++)
	{
		if (m_apObject[nCntObject] != nullptr)
		{// nullptrではなかったら
			// 描画
			m_apObject[nCntObject]->Draw();
		}
	}
}

//-----------------------------------------------------------------------------------------------
// 親の削除
//-----------------------------------------------------------------------------------------------
void CObject::ReleseParent(OBJECT_PARENT parent)
{
	for (int nCntObject = 0; nCntObject < MAX_OBJECT; nCntObject++)
	{
		if  (m_apObject[nCntObject] != nullptr)
		{// 親が一致、nullptrではなかったら
			if (m_apObject[nCntObject]->GetObjectParent() == parent)
			{// 親が一致していたら
				// 終了
				m_apObject[nCntObject]->Uninit();

				// メモリの開放
				delete m_apObject[nCntObject];

				// nullptrにする
				m_apObject[nCntObject] = nullptr;
			}
		}
	}
}

//-----------------------------------------------------------------------------------------------
// オブジェクトの種類を設定
//
// OBJECT_TYPE objectType → オブジェクトの種類を指定 
//-----------------------------------------------------------------------------------------------
void CObject::SetObjectType(OBJECT_TYPE objectType)
{
	m_ObjectType = objectType;
}

//-----------------------------------------------------------------------------------------------
// オブジェクトの種類を取得
//-----------------------------------------------------------------------------------------------
OBJECT_TYPE CObject::GetObjectType() const
{
	return m_ObjectType;
}

//-----------------------------------------------------------------------------------------------
// 親を設定
//
// OBJECT_PARENT parent → オブジェクトの親を指定
//-----------------------------------------------------------------------------------------------
void CObject::SetObjectParent(OBJECT_PARENT parent)
{
	m_parent = parent;
}

//-----------------------------------------------------------------------------------------------
// 親を取得
//-----------------------------------------------------------------------------------------------
CObject::OBJECT_PARENT CObject::GetObjectParent()
{
	return m_parent;
}

//-----------------------------------------------------------------------------------------------
// オブジェクトのポインタを取得
//
// int nCntObject → 何番目か指定
//-----------------------------------------------------------------------------------------------
CObject* CObject::GetObject(int nCntObject)
{
	return m_apObject[nCntObject];
}

//-----------------------------------------------------------------------------------------------
//　オブジェクトの破棄
//-----------------------------------------------------------------------------------------------
void CObject::Relese()
{
	if (m_apObject[m_nID] != nullptr)
	{// nullptrではなかったら
		// 変数を格納
		int nID = m_nID;

		// メモリの開放
		delete m_apObject[nID];

		// nullptrに戻す
		m_apObject[nID] = nullptr;

		// 最大個数を減らす
		m_nNumAll--;
	}
}