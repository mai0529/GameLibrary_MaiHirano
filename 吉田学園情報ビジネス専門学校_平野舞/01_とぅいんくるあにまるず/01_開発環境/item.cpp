//-----------------------------------------------------------------------------------------------
//
// アイテムの処理[item.cpp]
// Author : 平野舞
//
//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------------------------
#include "item.h"			// アイテム
#include "game.h"			// ゲーム
#include "renderer.h"		// レンダリング
#include "itemManager.h"	// アイテムマネージャー
#include "itemBom.h"		// 爆弾型アイテム
#include "itemObstacle.h"	// お邪魔型アイテム

//-----------------------------------------------------------------------------------------------
// 定数宣言
//-----------------------------------------------------------------------------------------------
// 幅
static const float ITEM_WIDTH = 40.0f;
// 高さ
static const float ITEM_HEIGHT = 40.0f;

//-----------------------------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------------------------
CItem::CItem()
	: m_nID(0),m_move(0.0f, 0.0f, 0.0f), m_type(ITEM_TYPE_BOM)
{

}

//-----------------------------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------------------------
CItem::~CItem()
{

}

//-----------------------------------------------------------------------------------------------
// 生成
//
//const D3DXVECTOR3& pos → 生成する座標位置
//-----------------------------------------------------------------------------------------------
CItem* CItem::Create(const D3DXVECTOR3& pos)
{
	// ポインタクラスを宣言
	CItem* pItem = new CItem;

	if (pItem != nullptr)
	{// もしnullptrではなかったら
	 // 初期化
		pItem->Init(pos);
	}

	return pItem;
}

//-----------------------------------------------------------------------------------------------
// 初期化
//
// const D3DXVECTOR3& pos → 最初に表示する座標位置
//-----------------------------------------------------------------------------------------------
HRESULT CItem::Init(const D3DXVECTOR3& pos)
{
	//サイズ
	CObject2D::SetSize(D3DXVECTOR3(ITEM_WIDTH, ITEM_HEIGHT, 0.0f));

	CObject2D::Init(pos);

	//オブジェクトタイプを設定
	SetObjectType(EOBJECT_TYPE::EOBJECT_TYPE_ITEM);

	// 親の設定
	SetObjectParent(EOBJECT_PARENT::EOBJECT_PARENT_GAME);

	return S_OK;
}

//-----------------------------------------------------------------------------------------------
// 終了
//-----------------------------------------------------------------------------------------------s
void CItem::Uninit()
{
	CObject2D::Uninit();
}

//-----------------------------------------------------------------------------------------------
// 更新
//-----------------------------------------------------------------------------------------------
void CItem::Update()
{
	// 位置の取得
	D3DXVECTOR3 pos = CObject2D::GetPosition();

	// 移動量の更新
	pos += m_move;

	if (pos.x - (ITEM_WIDTH / 2.0f) >= CRenderer::SCREEN_WIDTH
		|| pos.x + (ITEM_WIDTH / 2.0f) <= 0
		|| pos.y - (ITEM_HEIGHT / 2.0f) >= CRenderer::SCREEN_HEIGHT
		|| pos.y + (ITEM_HEIGHT / 2.0f) <= 0)
	{// 画面外にでたら
		CItemManager::GetInstance()->ItemDelete(m_nID);
	}
	else
	{
		// 位置の更新
		CObject2D::SetPosition(pos);
		CObject2D::UpdatePos();
	}
}

//-----------------------------------------------------------------------------------------------
// 描画
//-----------------------------------------------------------------------------------------------
void CItem::Draw()
{
	CObject2D::Draw();
}

//-----------------------------------------------------------------------------------------------
// 格納先の番号の設定
//-----------------------------------------------------------------------------------------------
void CItem::SetID(int nID)
{
	m_nID = nID;
}

//-----------------------------------------------------------------------------------------------
// 格納先の番号取得
//-----------------------------------------------------------------------------------------------
int CItem::GetID()
{
	return m_nID;
}

//-----------------------------------------------------------------------------------------------
// 移動量を設定
//
// D3DXVECTOR3 move → 移動したい量
//-----------------------------------------------------------------------------------------------
void CItem::SetMove(const D3DXVECTOR3& move)
{
	m_move = move;
}

//-----------------------------------------------------------------------------------------------
// 種類の設定
//
// ITEM_TYPE type → アイテムの種類を設定
//-----------------------------------------------------------------------------------------------
void CItem::SetItemType(ITEM_TYPE type)
{
	m_type = type;
}

//-----------------------------------------------------------------------------------------------
// 種類の取得
//-----------------------------------------------------------------------------------------------
CItem::ITEM_TYPE CItem::GetItemType()
{
	return m_type;
}